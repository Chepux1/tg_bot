import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    JobQueue,
)
import aiohttp
from datetime import datetime, timedelta
import sqlite3
import pytz
import re
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
(
    ADDING_HABIT,
    MARKING_DONE,
    SETTING_REMINDER,
    ADDING_DEADLINE,
    SETTING_DEADLINE_DATE,
    SETTING_DEADLINE_TIME,
    DELETING_ITEM,
    SETTING_REMINDER_INTERVAL,
) = range(8)


def init_db():
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS habits
        (
            id
            INTEGER
            PRIMARY
            KEY
            AUTOINCREMENT,
            user_id
            INTEGER,
            habit
            TEXT,
            is_done
            BOOLEAN,
            created_at
            TIMESTAMP,
            reminder_interval
            INTEGER
            DEFAULT
            3600,
            is_deadline
            BOOLEAN
            DEFAULT
            FALSE,
            deadline_date
            TIMESTAMP
            NULL
        )
        """
    )
    conn.commit()
    conn.close()


def add_habit_to_db(user_id, habit_text, is_deadline=False, deadline_date=None):
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO habits (user_id, habit, is_done, created_at, is_deadline, deadline_date) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, habit_text, False, datetime.now(pytz.utc), is_deadline, deadline_date),
    )
    habit_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return habit_id


def get_user_habits(user_id):
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, habit, is_done, reminder_interval, is_deadline, deadline_date FROM habits WHERE user_id = ?",
        (user_id,)
    )
    habits = cursor.fetchall()
    conn.close()
    return habits


def get_habit(habit_id):
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, user_id, habit, is_done, reminder_interval, is_deadline, deadline_date FROM habits WHERE id = ?",
        (habit_id,)
    )
    habit = cursor.fetchone()
    conn.close()
    return habit


def update_habit_status(habit_id, is_done):
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE habits SET is_done = ? WHERE id = ?", (is_done, habit_id)
    )
    conn.commit()
    conn.close()


def update_reminder_interval(habit_id, interval_seconds):
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE habits SET reminder_interval = ? WHERE id = ?",
        (interval_seconds, habit_id)
    )
    conn.commit()
    conn.close()


def delete_habit(habit_id):
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM habits WHERE id = ?", (habit_id,))
    conn.commit()
    conn.close()


def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            ["–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏"],
            ["–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", "–£–¥–∞–ª–∏—Ç—å"],
            ["–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω"],
            ["–ü–æ–≥–æ–¥–∞", "–ü–æ–º–æ—â—å"],
        ],
        resize_keyboard=True,
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
    )


async def add_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ADDING_HABIT


async def habit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    habit_text = update.message.text
    user_id = update.message.from_user.id

    habit_id = add_habit_to_db(user_id, habit_text)
    context.job_queue.run_repeating(
        send_reminder,
        interval=timedelta(seconds=3600),
        first=10,
        chat_id=update.message.chat_id,
        data={"habit_id": habit_id, "habit_text": habit_text},
        name=f"reminder_{habit_id}",
    )

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π —á–∞—Å.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'.",
        reply_markup=get_main_menu(),
    )
    return ConversationHandler.END


async def add_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ADDING_DEADLINE


async def deadline_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["deadline_name"] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2023):",
    )
    return SETTING_DEADLINE_DATE


async def deadline_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        deadline_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
        today = datetime.now().date()

        if deadline_date < today:
            await update.message.reply_text(
                "‚ùå –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=get_main_menu(),
            )
            return SETTING_DEADLINE_DATE

        context.user_data["deadline_date"] = deadline_date
        await update.message.reply_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
            reply_markup=ReplyKeyboardRemove(),
        )
        return SETTING_DEADLINE_TIME

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_main_menu(),
        )
        return SETTING_DEADLINE_DATE


async def deadline_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        reminder_time = datetime.strptime(update.message.text, "%H:%M").time()
        deadline_date = context.user_data["deadline_date"]
        deadline_datetime = datetime.combine(deadline_date, reminder_time)
        deadline_datetime = pytz.utc.localize(deadline_datetime)
        if deadline_datetime < datetime.now(pytz.utc):
            await update.message.reply_text(
                "‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_main_menu(),
            )
            return SETTING_DEADLINE_TIME

        habit_id = add_habit_to_db(
            update.message.from_user.id,
            context.user_data["deadline_name"],
            is_deadline=True,
            deadline_date=deadline_datetime,
        )

        context.job_queue.run_daily(
            send_deadline_reminder,
            time=reminder_time,
            days=tuple(range(7)),
            chat_id=update.message.chat_id,
            data={
                "habit_id": habit_id,
                "deadline_name": context.user_data["deadline_name"],
                "deadline_date": deadline_datetime
            },
            name=f"deadline_{habit_id}",
        )

        await update.message.reply_text(
            f"‚úÖ –î–µ–¥–ª–∞–π–Ω '{context.user_data['deadline_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üìÖ –î–∞—Ç–∞: {deadline_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {reminder_time.strftime('%H:%M')}",
            reply_markup=get_main_menu(),
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
            reply_markup=get_main_menu(),
        )
        return SETTING_DEADLINE_TIME


async def send_deadline_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    deadline_name = job.data["deadline_name"]
    deadline_date = job.data["deadline_date"]
    habit_id = job.data["habit_id"]
    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute("SELECT is_done FROM habits WHERE id = ?", (habit_id,))
    is_done = cursor.fetchone()[0]
    conn.close()

    if not is_done:
        now = datetime.now(pytz.utc)
        days_left = (deadline_date - now).days

        if days_left > 0:
            message = (
                f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline_name}\n"
                f"üìÖ –î–∞—Ç–∞: {deadline_date.strftime('%d.%m.%Y')}\n"
                f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
            )
        elif days_left == 0:
            message = (
                f"‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å!\n"
                f"–î–µ–¥–ª–∞–π–Ω: {deadline_name}\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!"
            )
        else:
            message = (
                f"üö® –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!\n"
                f"{deadline_name} –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω {deadline_date.strftime('%d.%m.%Y')}\n"
                f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {-days_left} –¥–Ω–µ–π"
            )
            update_habit_status(habit_id, True)
            job.schedule_removal()

        try:
            await context.bot.send_message(
                job.chat_id,
                message,
                reply_markup=get_main_menu(),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def my_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.",
            reply_markup=get_main_menu(),
        )
        return

    message = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
    for habit_id, habit_text, is_done, interval, is_deadline, deadline_date in habits:
        if is_deadline:
            deadline_str = deadline_date.strftime("%d.%m.%Y") if deadline_date else "???"
            status = f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_str}"
        else:
            interval_hours = interval // 3600
            interval_min = (interval % 3600) // 60
            status = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {interval_hours}—á {interval_min}–º"

        done_status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" if is_done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        message += f"{habit_id}. {habit_text}\n{status} - {done_status}\n\n"

    await update.message.reply_text(
        message,
        reply_markup=get_main_menu(),
    )


async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    habits = get_user_habits(user_id)
    deadlines = [h for h in habits if h[4]]  # is_deadline=True

    if not deadlines:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏",
            reply_markup=get_main_menu(),
        )
        return

    keyboard = [[str(habit_id)] for habit_id, _, _, _, _, _ in deadlines]
    keyboard.append(["–û—Ç–º–µ–Ω–∞"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ ID –¥–µ–¥–ª–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏–ª–∏:",
        reply_markup=reply_markup,
    )
    return MARKING_DONE


async def deadline_done_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu(),
        )
        return ConversationHandler.END

    try:
        habit_id = int(update.message.text)
        habit = get_habit(habit_id)

        if not habit or not habit[5]:
            await update.message.reply_text(
                "–î–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu(),
            )
            return ConversationHandler.END

        update_habit_status(habit_id, True)
        for job in context.job_queue.get_jobs_by_name(f"deadline_{habit_id}"):
            job.schedule_removal()

        await update.message.reply_text(
            f"–î–µ–¥–ª–∞–π–Ω '{habit[2]}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
            reply_markup=get_main_menu(),
        )
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID",
            reply_markup=get_main_menu(),
        )
        return MARKING_DONE

    return ConversationHandler.END


async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_main_menu(),
        )
        return

    keyboard = [[str(habit_id)] for habit_id, _, _, _, _, _ in habits]
    keyboard.append(["–û—Ç–º–µ–Ω–∞"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ ID –ø—Ä–∏–≤—ã—á–∫–∏/–¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup,
    )
    return DELETING_ITEM


async def delete_item_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu(),
        )
        return ConversationHandler.END

    try:
        habit_id = int(update.message.text)
        habit = get_habit(habit_id)

        if not habit:
            await update.message.reply_text(
                "–ü—Ä–∏–≤—ã—á–∫–∞/–¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu(),
            )
            return ConversationHandler.END
        for job in context.job_queue.get_jobs_by_name(f"reminder_{habit_id}"):
            job.schedule_removal()
        for job in context.job_queue.get_jobs_by_name(f"deadline_{habit_id}"):
            job.schedule_removal()
        delete_habit(habit_id)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤—ã—á–∫–∞/–¥–µ–¥–ª–∞–π–Ω '{habit[2]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
            reply_markup=get_main_menu(),
        )
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID",
            reply_markup=get_main_menu(),
        )
        return DELETING_ITEM

    return ConversationHandler.END


async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    habits = get_user_habits(user_id)
    regular_habits = [h for h in habits if not h[4]]

    if not regular_habits:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            reply_markup=get_main_menu(),
        )
        return

    keyboard = [[str(habit_id)] for habit_id, _, _, _, _, _ in regular_habits]
    keyboard.append(["–û—Ç–º–µ–Ω–∞"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ ID –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=reply_markup,
    )
    return SETTING_REMINDER


async def set_reminder_habit_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu(),
        )
        return ConversationHandler.END

    try:
        habit_id = int(update.message.text)
        habit = get_habit(habit_id)

        if not habit or habit[5]:
            await update.message.reply_text(
                "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –¥–µ–¥–ª–∞–π–Ω",
                reply_markup=get_main_menu(),
            )
            return ConversationHandler.END

        context.user_data["reminder_habit_id"] = habit_id
        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏: {habit[2]}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–Ω–∏:—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "0:1:0:0 - –∫–∞–∂–¥—ã–π —á–∞—Å\n"
            "0:0:30:0 - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
            "1:0:0:0 - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            reply_markup=ReplyKeyboardRemove(),
        )
        return SETTING_REMINDER_INTERVAL
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–≤—ã—á–∫–∏",
            reply_markup=get_main_menu(),
        )
        return SETTING_REMINDER


async def set_reminder_interval_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    interval_pattern = re.compile(r"^(\d+):(\d+):(\d+):(\d+)$")
    match = interval_pattern.match(update.message.text)

    if not match:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–Ω–∏:—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0:1:0:0)",
            reply_markup=get_main_menu(),
        )
        return ConversationHandler.END

    days, hours, minutes, seconds = map(int, match.groups())
    total_seconds = days * 86400 + hours * 3600 + minutes * 60 + seconds

    if total_seconds <= 0:
        await update.message.reply_text(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 —Å–µ–∫—É–Ω–¥",
            reply_markup=get_main_menu(),
        )
        return ConversationHandler.END

    habit_id = context.user_data["reminder_habit_id"]
    habit = get_habit(habit_id)

    update_reminder_interval(habit_id, total_seconds)

    for job in context.job_queue.get_jobs_by_name(f"reminder_{habit_id}"):
        job.schedule_removal()

    context.job_queue.run_repeating(
        send_reminder,
        interval=timedelta(seconds=total_seconds),
        first=10,
        chat_id=update.message.chat_id,
        data={"habit_id": habit_id, "habit_text": habit[2]},
        name=f"reminder_{habit_id}",
    )

    await update.message.reply_text(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '{habit[2]}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª: {days}–¥ {hours}—á {minutes}–º {seconds}—Å",
        reply_markup=get_main_menu(),
    )
    return ConversationHandler.END


async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    habit_text = job.data["habit_text"]
    habit_id = job.data["habit_id"]

    conn = sqlite3.connect("habits.db")
    cursor = conn.cursor()
    cursor.execute("SELECT is_done FROM habits WHERE id = ?", (habit_id,))
    is_done = cursor.fetchone()[0]
    conn.close()

    if not is_done:
        await context.bot.send_message(
            job.chat_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É '{habit_text}'!",
            reply_markup=get_main_menu(),
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω - —Å–æ–∑–¥–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
        "‚Ä¢ –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω - –æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏\n\n"
        "üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2023)\n"
        "‚è± –§–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –¥–Ω–∏:—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0:1:30:0)",
        reply_markup=get_main_menu(),
    )


async def get_current_weather(location: str):
    url = "http://api.openweathermap.org/data/2.5/weather?id=524901&lang=ru&units=metric&APPID=2faa30a09d31ad5474a216fee4d6897a";
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()

            if response.status != 200:
                raise Exception(data.get('message', 'Unknown error'))

            weather = data['weather'][0]
            main = data['main']
            wind = data['wind']
            visibility = data.get('visibility', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

            sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
            sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')

            return (
                f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:\n"
                f"‚Ä¢ {weather['description'].capitalize()}\n"
                f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main['feels_like']}¬∞C)\n"
                f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%\n"
                f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind['speed']} –º/—Å, –ø–æ—Ä—ã–≤—ã –¥–æ {wind.get('gust', wind['speed'])} –º/—Å\n"
                f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: {main['pressure']} hPa\n"
                f"‚Ä¢ –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –º\n"
                f"‚Ä¢ –í–æ—Å—Ö–æ–¥: {sunrise}, –∑–∞–∫–∞—Ç: {sunset}"
            )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "habit_id" in context.user_data:
        context.user_data.clear()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu(),
    )
    return ConversationHandler.END


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É":
        return await add_habit(update, context)
    elif text == "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏":
        return await my_habits(update, context)
    elif text == "–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω":
        return await mark_done(update, context)
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω":
        return await add_deadline(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å":
        return await delete_item(update, context)
    elif text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        return await set_reminder(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif text == "–ü–æ–≥–æ–¥–∞":
        try:
            weather_info = await get_current_weather()
            await update.message.reply_text(
                weather_info,
                reply_markup=get_main_menu(),
            )
        except Exception as e:
            logger.error(f"Weather error: {e}")
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu(),
            )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_menu(),
        )


def main():
    init_db()

    application = Application.builder().token("7964089903:AAGDN4NER4KgGJa18OwVp_HeIc3eEoO7a3g").build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
        ],
        states={
            ADDING_HABIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, habit_input)],
            ADDING_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_input)],
            SETTING_DEADLINE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_date_input)],
            SETTING_DEADLINE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_time_input)],
            MARKING_DONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, deadline_done_input)],
            DELETING_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_item_input)],
            SETTING_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder_habit_selected)],
            SETTING_REMINDER_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder_interval_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    application.run_polling()


if __name__ == "__main__":
    main()